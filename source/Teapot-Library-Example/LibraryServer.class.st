"
I'm the web server that provides a REST API for creating, deleting and finding books. My responses are in JSON format (generated by NeoJSON).
I use Teapot internally.
"
Class {
	#name : #LibraryServer,
	#superclass : #Object,
	#instVars : [
		'port',
		'teapot',
		'bookShelf'
	],
	#category : #'Teapot-Library-Example'
}

{ #category : #'instance creation' }
LibraryServer class >> serveOn: portNumber [
	^ self new  
		initializePort: portNumber;
		start
]

{ #category : #'error handlers' }
LibraryServer >> bookNotFound: aBookNotFound request: aZnRequest [
	^ TeaResponse notFound body:
		{ 
			#code -> 'NOT_FOUND'. 
			#message -> ('No such book: ', aBookNotFound bookId asString)
		} asDictionary
]

{ #category : #routes }
LibraryServer >> createBook: request [
	| book |
	book := bookShelf addBook: (self makeBook: request).
	^ TeaResponse created
		body: book;
		location: '/books/', (book at: #id) asString
]

{ #category : #routes }
LibraryServer >> deleteBook: request [
	| bookId |
	bookId := request at: #id.			
	bookShelf removeBook: bookId.
	^ TeaResponse ok body: 'Deleted /books/', bookId asString

	
	
	

]

{ #category : #initialization }
LibraryServer >> initializePort: anInteger [
	bookShelf := BookShelf new.
	teapot := Teapot configure: { 
		#port -> anInteger. 
		#debugMode -> true. 
		#defaultOutput -> #json 
	}.
	^ self 
		registerRoutes;
		registerErrorHandlers;
		yourself
]

{ #category : #private }
LibraryServer >> makeBook: request [
	^ {#title   -> (request at: #title).
      #authors -> (request at: #authors)} asDictionary.
]

{ #category : #'error handlers' }
LibraryServer >> missingParam: aTeaNoSuchParam request: aZnRequest [
	^ TeaResponse badRequest body:
		{ 
			#code -> 'MALFORMED_INPUT'. 
			#message -> ('Missing parameter: ', aTeaNoSuchParam param)
		} asDictionary
]

{ #category : #routes }
LibraryServer >> readBook: request [
	^ bookShelf findBook: (request at: #id)
]

{ #category : #routes }
LibraryServer >> readBooks: aTeaRequest [ 
	^ bookShelf books
]

{ #category : #initialization }
LibraryServer >> registerErrorHandlers [
	teapot
		exception: TeaNoSuchParam -> (Send message: #missingParam:request: to: self);
		exception: BookNotFound -> (Send message: #bookNotFound:request: to: self)
]

{ #category : #initialization }
LibraryServer >> registerRoutes [
	teapot
		GET: '/' -> '<h1>A simple book library server</h1>'; output: #html;
		GET: '/books' -> (Send message: #readBooks: to: self);
		GET: '/books/<id:IsInteger>' -> (Send message: #readBook: to: self);
		POST: '/books' -> (Send message: #createBook: to: self);		
		PUT: '/books/<id:IsInteger>' -> (Send message: #updateBook: to: self);
		DELETE: '/books/<id:IsInteger>' -> (Send message: #deleteBook: to: self)
]

{ #category : #controlling }
LibraryServer >> start [
	teapot start.
	^ self
]

{ #category : #controlling }
LibraryServer >> stop [
	teapot stop
]

{ #category : #routes }
LibraryServer >> updateBook: request [
	^ bookShelf 
		replaceBook: (request at: 'id') 
		with: (self makeBook: request)

	

	
]
